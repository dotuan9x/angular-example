{
    "pipes": [],
    "interfaces": [
        {
            "name": "Action",
            "id": "interface-Action-3a3f9f28036bfc63dac7905d3e637387",
            "file": "src/app/todoist/todoist.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createAction, props } from '@ngrx/store';\nimport {ITask, ISort, IProject} from \"@app/interface\";\n\nexport interface Action {\n  type: string\n}\n\n// Project\nexport const getProjectsAction = createAction('[Todoist] Get Projects')\nexport const updateProjectsAction = createAction('[Todoist] Update Projects', props<{projects: IProject[]}>());\n\n// Menu\nexport const changeMenuAction = createAction('[Todoist] Change Menu', props<{id: string}>());\n\n// Tasks\nexport const getTasksAction = createAction('[Todoist] Get Tasks', props<{projectId: string}>());\nexport const updateTasksAction = createAction('[Todoist] Update Tasks', props<{tasks: ITask[]}>());\nexport const createTaskAction = createAction('[Todoist] Create Task', props<{task: ITask}>());\nexport const updateTaskAction = createAction('[Todoist] Update Task', props<ITask>());\n\nexport const changeSortBy = createAction('[Todoist] Change Sort By', props<ISort>());\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ICreateTaskInput",
            "id": "interface-ICreateTaskInput-a05d4a93a82fefa2ac0b94eefb5e7091",
            "file": "src/app/interface/task.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITask {\n  id?: string,\n  title?: string,\n  status?: 'TODO' | 'DONE'\n  important?: boolean,\n  created?: Date\n}\n\nexport interface ICreateTaskInput {\n  title: string,\n  description?: string,\n}\n\nexport interface ISort {\n  name: string,\n  title: string,\n  icon?: string\n}\n\nexport interface ISortBy {\n  name?: string,\n  az?: 'asc' | 'desc'\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IMenu",
            "id": "interface-IMenu-9018bb2f753bcc88786adfc0419456f8",
            "file": "src/app/interface/menu.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenu {\n  name: string,\n  label: string,\n  active: boolean,\n  icon: string,\n  counter?: number\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "counter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IProject",
            "id": "interface-IProject-cd530e6d00588d4849241e283ce94f48",
            "file": "src/app/interface/project.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IProject {\n  id?: string,\n  name?: string,\n  title: string,\n  description?: string,\n  icon?: string,\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ISort",
            "id": "interface-ISort-a05d4a93a82fefa2ac0b94eefb5e7091",
            "file": "src/app/interface/task.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITask {\n  id?: string,\n  title?: string,\n  status?: 'TODO' | 'DONE'\n  important?: boolean,\n  created?: Date\n}\n\nexport interface ICreateTaskInput {\n  title: string,\n  description?: string,\n}\n\nexport interface ISort {\n  name: string,\n  title: string,\n  icon?: string\n}\n\nexport interface ISortBy {\n  name?: string,\n  az?: 'asc' | 'desc'\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ISortBy",
            "id": "interface-ISortBy-a05d4a93a82fefa2ac0b94eefb5e7091",
            "file": "src/app/interface/task.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITask {\n  id?: string,\n  title?: string,\n  status?: 'TODO' | 'DONE'\n  important?: boolean,\n  created?: Date\n}\n\nexport interface ICreateTaskInput {\n  title: string,\n  description?: string,\n}\n\nexport interface ISort {\n  name: string,\n  title: string,\n  icon?: string\n}\n\nexport interface ISortBy {\n  name?: string,\n  az?: 'asc' | 'desc'\n}\n",
            "properties": [
                {
                    "name": "az",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ITask",
            "id": "interface-ITask-a05d4a93a82fefa2ac0b94eefb5e7091",
            "file": "src/app/interface/task.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITask {\n  id?: string,\n  title?: string,\n  status?: 'TODO' | 'DONE'\n  important?: boolean,\n  created?: Date\n}\n\nexport interface ICreateTaskInput {\n  title: string,\n  description?: string,\n}\n\nexport interface ISort {\n  name: string,\n  title: string,\n  icon?: string\n}\n\nexport interface ISortBy {\n  name?: string,\n  az?: 'asc' | 'desc'\n}\n",
            "properties": [
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "important",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"TODO\" | \"DONE\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TodoState",
            "id": "interface-TodoState-e6b9512571e772be580f6306d1ea23e1",
            "file": "src/app/todoist/todoist.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on } from '@ngrx/store';\nimport produce from 'immer'\nimport {ISortBy, ITask, IProject} from \"@app/interface\";\nimport {IMenu} from \"@app/interface/menu.type\";\n\nimport {DEFAULT_MENU} from '@todoist/config/const'\nimport {updateProjectsAction, updateTasksAction, createTaskAction, changeMenuAction, changeSortBy} from './todoist.actions';\n\nexport const TODO_FEATURE_KEY = 'todo';\n\nexport interface TodoState {\n  menus: IMenu[];\n  projects: IProject[];\n  tasks: ITask[];\n  sortBy?: ISortBy;\n}\n\nexport const initialState: TodoState = {\n  menus: DEFAULT_MENU,\n  projects: [],\n  tasks: []\n};\n\nexport const totoReducer = createReducer(\n  initialState,\n    on(updateProjectsAction, (state, {projects}) => {\n      return produce(state, draftState => {\n        // Update menu\n        draftState.menus = projects.map((project) => {\n          return {\n            name: project.name || project.id,\n            label: project.title,\n            active: false,\n            icon: project.icon,\n          }\n        })\n\n        draftState.projects = projects\n      })\n    }),\n    on(changeMenuAction, (state, {id}) => {\n      return produce(state, draftState => {\n        draftState.menus.map((menu) => {\n          menu.active = (menu.name === id)\n\n          return menu;\n        })\n      })\n    }),\n    on(updateTasksAction, (state, {tasks}) => {\n      return produce(state, draftState => {\n        draftState.tasks = tasks\n      })\n    }),\n    on(changeSortBy, (state, sort) => {\n      return {...state, sortBy: {name: sort.name, az: 'asc'}}\n    }),\n    on(createTaskAction, (state, {task}) => {\n\n      console.log('tasl', task)\n\n      return {...state, tasks: state.tasks}\n    }),\n)\n",
            "properties": [
                {
                    "name": "menus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProject[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISortBy",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITask[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-399e86b165a9f80b56f9427ab118b7a4",
            "file": "src/app/services/project.service.ts",
            "properties": [
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Apollo} from 'apollo-angular';\nimport {map} from 'rxjs/operators';\nimport {QUERY_PROJECTS} from '@app/graphql'\n\n@Injectable({providedIn: 'root'})\nexport class ProjectService {\n  projects: any[];\n\n  constructor(private apollo: Apollo) {\n  }\n\n  getAll() {\n    return this.apollo.watchQuery<any>({\n      query: QUERY_PROJECTS\n    }).valueChanges\n      .pipe(\n        map(result => result.data.projects)\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-88e9e9f5272af6ef42c96b71ff68ca75",
            "file": "src/app/services/task.service.ts",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "ICreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "ICreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Apollo} from 'apollo-angular';\nimport {QUERY_TASKS, CREATE_TASK} from '@app/graphql'\nimport {map} from \"rxjs/operators\";\nimport {ICreateTaskInput} from \"@app/interface\";\n\n@Injectable({providedIn: 'root'})\nexport class TaskService {\n  tasks: any[];\n  loading = true;\n  error: any;\n\n  constructor(private apollo: Apollo) {\n  }\n\n  createTask(input: ICreateTaskInput) {\n    return this.apollo.mutate({\n      mutation: CREATE_TASK,\n      variables: {\n        ...input\n      },\n    }).pipe(map(result => result.data))\n  }\n\n  getAll(projectId: string) {\n    return this.apollo.watchQuery<any>({\n      query: QUERY_TASKS,\n      variables: {\n        projectId: projectId,\n      },\n    }).valueChanges.pipe(\n      map(result => result.data.tasks)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoistEffects",
            "id": "injectable-TodoistEffects-7d18f37c4ea4b14357a953e0aae21126",
            "file": "src/app/todoist/todoist.effects.ts",
            "properties": [
                {
                    "name": "loadProjects$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(getProjectsAction),\n      mergeMap(() => this.projectService.getAll()\n        .pipe(\n          map(projects => updateProjectsAction({projects: projects})),\n          catchError(() => EMPTY)\n        ))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loadTasks$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(getTasksAction),\n      mergeMap(({ projectId }) => this.taskService.getAll(projectId)\n        .pipe(\n          map(tasks => updateTasksAction({tasks: tasks})),\n          catchError(() => EMPTY)\n        ))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY } from 'rxjs';\nimport { map, mergeMap, find, withLatestFrom, catchError} from 'rxjs/operators';\nimport {Store, select} from \"@ngrx/store\";\nimport {\n  getProjectsAction,\n  updateProjectsAction,\n  getTasksAction,\n  updateTasksAction,\n  createTaskAction\n} from \"@todoist/todoist.actions\";\nimport {ProjectService, TaskService} from \"@app/services\";\nimport {getProjects} from \"@todoist/todoist.selectors\";\n\n@Injectable()\nexport class TodoistEffects {\n  loadProjects$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(getProjectsAction),\n      mergeMap(() => this.projectService.getAll()\n        .pipe(\n          map(projects => updateProjectsAction({projects: projects})),\n          catchError(() => EMPTY)\n        ))\n    )\n  );\n\n  loadTasks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(getTasksAction),\n      mergeMap(({ projectId }) => this.taskService.getAll(projectId)\n        .pipe(\n          map(tasks => updateTasksAction({tasks: tasks})),\n          catchError(() => EMPTY)\n        ))\n    )\n  );\n\n  /*createTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(createTaskAction),\n      mergeMap(({ task }) => this.taskService.createTask(task).pipe(\n        map(task => updateTasksAction({tasks: tasks})),\n        catchError(() => EMPTY)\n      ))\n    )\n  );*/\n\n  constructor(\n    private actions$: Actions,\n    private store: Store,\n    private projectService: ProjectService,\n    private taskService: TaskService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddTaskComponent",
            "id": "component-AddTaskComponent-445600210cdd611ba3b85e1cda55523c",
            "file": "src/app/todoist/components/add-task/add-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAddTask",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addTaskControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "addTaskInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'addTaskInput'"
                        }
                    ]
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlurAddTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickAddTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnterAddTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output, ViewChild} from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'add-task',\n  templateUrl: './add-task.component.html'\n})\nexport class AddTaskComponent implements OnInit {\n  @ViewChild('addTaskInput') addTaskInput;\n  @Output() onAddTask = new EventEmitter<string>();\n  isFocus: boolean = false;\n  addTaskControl: FormControl\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.addTaskControl = new FormControl('')\n  }\n\n  onEnterAddTask() {\n    this.onSubmit()\n  }\n\n  onClickAddTask() {\n    if (!this.isFocus) {\n      this.isFocus = true\n\n      // focus input add to task\n      setTimeout(() => {\n        this.addTaskInput.nativeElement.focus()\n      }, 10)\n    }\n  }\n\n  onBlurAddTask() {\n    this.isFocus = false\n    this.onSubmit()\n  }\n\n  onSubmit() {\n    this.onAddTask.emit(this.addTaskControl.value)\n    // reset task input\n    this.addTaskControl.patchValue('')\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"w-full flex flex-row cursor-text h-9\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg *ngIf=\"!isFocus\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n    </svg>\n    <mat-checkbox *ngIf=\"isFocus\" color=\"primary\"></mat-checkbox>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 h-full\" (click)=\"onClickAddTask()\">\n    <label *ngIf=\"!isFocus\" class=\"flex items-center h-full text-sm cursor-text\">Add a task</label>\n    <input type=\"text\" [ngClass]=\"{'hidden': !isFocus}\" #addTaskInput\n           [formControl]=\"addTaskControl\"\n           class=\"h-9 p-0 m-0 border-0 text-sm shadow-none focus:shadow-none focus:ring-0\"\n           (blur)=\"onBlurAddTask()\"\n           (keydown.enter)=\"onEnterAddTask()\"\n           placeholder=\"Add a task\">\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-dd5302cfeac6fad2d5cfdf6920ccf2d6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Todo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "onChangeSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\n\nexport class AppComponent {\n  title = 'Todo';\n\n  onChangeSearch() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<!-- Header -->\n<div class=\"flex flex-col h-screen\">\n  <div class=\"flex flex-none toolbar h-12 w-full bg-blue-500\">\n    <div class=\"h-full w-full flex items-center px-5\">\n      <div class=\"flex flex-none\">\n      <span class=\"text-white cursor-pointer\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"/>\n        </svg>\n      </span>\n      </div>\n      <div class=\"flex flex-grow h-full p-2\">\n        <div class=\"relative mx-auto h-full\">\n          <div class=\"absolute h-full inset-y-0 left-0 pl-2 flex items-center h-full pointer-events-none\">\n          <span class=\"text-gray-500 sm:text-sm\">\n             <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"/>\n              </svg>\n          </span>\n          </div>\n          <input (change)=\"onChangeSearch()\"  type=\"text\" style=\"width: 400px\" name=\"price\" id=\"price\" autocomplete=\"off\"\n                 class=\"block w-full h-full px-10 py-2 sm:text-sm border-0 rounded-sm\"\n                 placeholder=\"Search\" />\n        </div>\n      </div>\n      <div class=\"flex flex-none\">\n      <span class=\"text-white cursor-pointer\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      </span>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex flex-grow flex-row w-full\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-b2d90a167e00916db9aa58fbb68db7de",
            "file": "src/app/todoist/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>breadcrumb works!</p>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LeftMenuComponent",
            "id": "component-LeftMenuComponent-05114906cb202ebf1c9761dee3ac821a",
            "file": "src/app/todoist/components/left-menu/left-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "left-menu",
            "styleUrls": [
                "left-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./left-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IMenu[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Store} from '@ngrx/store'\nimport {Observable} from \"rxjs\";\n\nimport {TodoState} from \"@todoist/todoist.reducer\";\nimport {getMenus} from \"@todoist/todoist.selectors\";\nimport {IMenu} from '@app/interface'\n\n@Component({\n  selector: 'left-menu',\n  templateUrl: './left-menu.component.html',\n  styleUrls: ['left-menu.component.scss']\n})\nexport class LeftMenuComponent implements OnInit {\n  menus: Observable<IMenu[]>\n\n  constructor(private store: Store<TodoState>) {\n    this.menus = this.store.select(getMenus);\n  }\n\n  ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n",
                    "styleUrl": "left-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex flex-col w-full\" xmlns=\"http://www.w3.org/1999/html\">\n  <ul class=\"mt-7 ml-2 pr-2\">\n    <li class=\"hover:bg-gray-100 rounded cursor-pointer\" [ngClass]=\"{'bg-gray-100': menu.active}\" *ngFor=\"let menu of menus | async\">\n      <a routerLink=\"/tasks/{{menu.name}}\" routerLinkActive=\"active\">\n        <div class=\"flex flex-row relative items-center w-full h-9 px-2 py-2 text-sm\">\n          <span class=\"pr-2\">\n             <svg-icon\n               [name]=\"menu.icon\"\n               [size]=\"16\">\n              </svg-icon>\n          </span>\n          <label [ngClass]=\"{'font-medium': menu.active}\" class=\"cursor-pointer\">{{menu.label}}</label>\n          <span *ngIf=\"menu.counter\" class=\"absolute top-0 right-0 p-2\">{{menu.counter}}</span>\n        </div>\n      </a>\n    </li>\n  </ul>\n\n  <ul class=\"mt-4 ml-2 pr-2\">\n    <li class=\"hover:bg-gray-100 rounded cursor-pointer\">\n      <a>\n        <div class=\"flex flex-row relative items-center w-full h-9 px-2 py-2 text-sm\">\n          <span class=\"pr-2\">\n             <svg-icon\n               class=\"text-blue-500\"\n               name=\"list-view\"\n               [size]=\"16\">\n              </svg-icon>\n          </span>\n          <label class=\"cursor-pointer\">Home</label>\n        </div>\n      </a>\n    </li>\n    <li class=\"hover:bg-gray-100 rounded cursor-pointer\">\n      <a>\n        <div class=\"flex flex-row relative items-center w-full h-9 px-2 py-2 text-sm\">\n          <span class=\"pr-2\">\n             <svg-icon\n               class=\"text-blue-500\"\n               name=\"list-view\"\n               [size]=\"16\">\n              </svg-icon>\n          </span>\n          <label class=\"cursor-pointer\">The Corner</label>\n        </div>\n      </a>\n    </li>\n    <li class=\"hover:bg-gray-100 rounded cursor-pointer\">\n      <a>\n        <div class=\"flex flex-row relative items-center w-full h-9 px-2 py-2 text-sm\">\n          <span class=\"pr-2\">\n             <svg-icon\n               class=\"text-blue-500\"\n               name=\"plus\"\n               [size]=\"16\">\n              </svg-icon>\n          </span>\n          <label class=\"cursor-pointer\">Danh sách mới</label>\n        </div>\n      </a>\n    </li>\n  </ul>\n</div>\n<resizer></resizer>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-fc7c14668a28acb12d057c371a3f7194",
            "file": "src/app/todoist/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html'\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>not-found works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ResizerComponent",
            "id": "component-ResizerComponent-de2d24682142e206740b5547e1c5bb63",
            "file": "src/app/todoist/components/resizer/resizer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "resizer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./resizer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'resizer',\n  templateUrl: './resizer.component.html'\n})\nexport class ResizerComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex absolute top-0 bottom-0 -right-2 w-5 h-full cursor-move\">\n  <div style=\"width: 2px\" class=\"flex h-full mx-auto hover:bg-blue-500\">\n\n  </div>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-b276deb31a088c0aa8c777c50480acee",
            "file": "src/app/todoist/pages/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html'\n})\nexport class SearchComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div>\n  Search\n</div>\n"
        },
        {
            "name": "SkeletonComponent",
            "id": "component-SkeletonComponent-4770f8ef434b59c82bff0dc3de9d07c6",
            "file": "src/app/todoist/components/skeleton/skeleton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "todoist-skeleton",
            "styleUrls": [],
            "styles": [
                ":host { width: 100% }"
            ],
            "templateUrl": [
                "./skeleton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'todoist-skeleton',\n  templateUrl: './skeleton.component.html',\n  styles: [':host { width: 100% }']\n})\nexport class SkeletonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { width: 100% }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"w-full mx-auto\">\n  <div class=\"animate-pulse flex flex-row flex-none items-center w-full justify-between\">\n    <div class=\"space-y-2\">\n      <div class=\"w-10 h-4 rounded bg-gray-200\"></div>\n      <div class=\"w-20 h-4 rounded bg-gray-200\"></div>\n    </div>\n    <div class=\"space-x-4 flex flex-row\">\n      <div class=\"w-20 h-6 rounded bg-gray-200\"></div>\n      <div class=\"w-20 h-6 rounded bg-gray-200\"></div>\n    </div>\n  </div>\n\n  <div class=\"animate-pulse flex space-x-4 mt-5\">\n    <div class=\"rounded-full bg-gray-200 h-8 w-8\"></div>\n    <div class=\"flex-1 space-y-2 py-1\">\n      <div class=\"h-4 bg-gray-200 rounded\"></div>\n      <div class=\"h-4 w-20 bg-gray-200 rounded\"></div>\n    </div>\n  </div>\n  <div class=\"animate-pulse flex space-x-4 mt-5\">\n    <div class=\"rounded-full bg-gray-200 h-8 w-8\"></div>\n    <div class=\"flex-1 space-y-2 py-1\">\n      <div class=\"h-4 bg-gray-200 rounded\"></div>\n      <div class=\"h-4 w-20 bg-gray-200 rounded\"></div>\n    </div>\n  </div>\n  <div class=\"animate-pulse flex space-x-4 mt-5\">\n    <div class=\"rounded-full bg-gray-200 h-8 w-8\"></div>\n    <div class=\"flex-1 space-y-2 py-1\">\n      <div class=\"h-4 bg-gray-200 rounded\"></div>\n      <div class=\"h-4 w-20 bg-gray-200 rounded\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SuggestionComponent",
            "id": "component-SuggestionComponent-572d9b84d06e1f570793aa4473f9e545",
            "file": "src/app/todoist/components/suggestion/suggestion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "suggestion",
            "styleUrls": [
                "./suggestion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./suggestion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'suggestion',\n  templateUrl: './suggestion.component.html',\n  styleUrls: ['./suggestion.component.scss']\n})\nexport class SuggestionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./suggestion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3>Suggestions</h3>\n\n"
        },
        {
            "name": "SvgDefinitionsComponent",
            "id": "component-SvgDefinitionsComponent-db9a6262062f8fc6649561749859997c",
            "file": "src/app/todoist/components/svg-definitions/svg-definitions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-definitions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./svg-definitions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svg-definitions',\n  templateUrl: './svg-definitions.component.html'\n})\nexport class SvgDefinitionsComponent {\n\n  constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "templateData": "<svg width=\"0\"\n     height=\"0\"\n     class=\"hidden\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <symbol id=\"sun\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"/>\n  </symbol>\n  <symbol id=\"star\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"/>\n  </symbol>\n  <symbol id=\"calendar\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n  </symbol>\n  <symbol id=\"home\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"/>\n  </symbol>\n  <symbol id=\"menu\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n  </symbol>\n  <symbol id=\"chevron-down\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n  </symbol>\n  <symbol id=\"chevron-right\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n  </symbol>\n  <symbol id=\"plus-sm\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n  </symbol>\n  <symbol id=\"plus\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\" />\n  </symbol>\n  <symbol id=\"close\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n  </symbol>\n  <symbol id=\"switch-vertical\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\" />\n  </symbol>\n  <symbol id=\"calculator\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\n  </symbol>\n  <symbol id=\"light-bulb\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n  </symbol>\n  <symbol id=\"bell\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n       stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"/>\n  </symbol>\n  <symbol id=\"clock\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n  </symbol>\n  <symbol id=\"tag\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"/>\n  </symbol>\n  <symbol id=\"paper-clip\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n          d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\"/>\n  </symbol>\n  <symbol id=\"list-view\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect x=\"4\" y=\"6\" width=\"40\" height=\"36\" rx=\"3\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M4 14H44\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M20 24H36\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M20 32H36\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M12 24H14\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M12 32H14\" stroke=\"#333\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  </symbol>\n</svg>\n"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-0e5846805c07306181ced8d27dbb3f09",
            "file": "src/app/todoist/components/svg-icon/svg-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./svg-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "defaultValue": "'currentColor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "window",
                    "defaultValue": "window",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'svg-icon',\n  templateUrl: './svg-icon.component.html'\n})\nexport class SvgIconComponent {\n  @Input() name: string;\n  @Input() size = 16;\n  @Input() fill = 'currentColor';\n  window: any = window;\n\n  constructor() { }\n\n  get iconUrl() {\n    return `${this.window.location.href}#${this.name}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "iconUrl": {
                    "name": "iconUrl",
                    "getSignature": {
                        "name": "iconUrl",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "templateData": "<svg version=\"1.1\"\n     [style.width.px]=\"size\"\n     [style.height.px]=\"size\"\n     [style.fill]=\"fill\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <use [attr.xlink:href]=\"iconUrl\"></use>\n</svg>\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-3bdb8b6a4377a5440b791a7c267746bf",
            "file": "src/app/todoist/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "title",
                    "defaultValue": "\"Title\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickTaskDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickTaskStar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, EventEmitter, OnInit} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {Store} from \"@ngrx/store\";\nimport {TodoState} from \"@todoist/todoist.reducer\";\nimport {updateTaskAction} from \"@todoist/todoist.actions\";\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html'\n})\nexport class TaskComponent implements OnInit {\n  @Input() id: string = \"\";\n  @Input() title: string = \"Title\";\n  @Input() status: string\n\n  constructor(private store: Store<TodoState>) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  onClickTask() {\n    console.log('onClickTask')\n\n  }\n\n  onClickTaskDone() {\n    this.store.dispatch(updateTaskAction({\n      id: this.id,\n      status: 'DONE'\n    }))\n  }\n\n  onClickTaskStar() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<li class=\"w-full flex flex-row border-t bg-white border-gray-100 cursor-pointer hover:bg-indigo-50 hover:border-indigo-50 rounded\">\n  <div class=\"flex flex-none items-center justify-center w-8\"  (click)=\"onClickTaskDone()\">\n    <mat-checkbox matTooltip=\"Đánh dấu hoàn thành\" color=\"primary\"></mat-checkbox>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\" (click)=\"onClickTask()\">\n    <label [ngClass]=\"{'line-through': (status === 'DONE')}\" class=\"text-sm\">{{title}}</label>\n    <!--<input type=\"text\" value=\"{{title}}\">-->\n    <div class=\"text-sm\">\n      <span>Tasks</span>\n    </div>\n  </div>\n  <div class=\"flex flex-none items-center justify-center w-8\" (click)=\"onClickTaskStar()\">\n    <svg-icon\n      matTooltip=\"Đánh dấu tác vụ quan trọng\"\n      name=\"star\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n</li>\n"
        },
        {
            "name": "TaskDetailComponent",
            "id": "component-TaskDetailComponent-06c98445544e955acfd4c66c4ea06a1e",
            "file": "src/app/todoist/components/task-detail/task-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "task-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'task-detail',\n  templateUrl: './task-detail.component.html'\n})\nexport class TaskDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex flex-row border-b border-gray-100\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <mat-checkbox matTooltip=\"Đánh dấu hoàn thành\" color=\"primary\"></mat-checkbox>\n  </div>\n  <div class=\"flex flex-col flex-grow py-2\">\n    <label class=\"text-sm cursor-text hover:bg-gray-100 px-3 py-1 rounded\">Hello huhu</label>\n  </div>\n  <div class=\"flex flex-none items-center justify-center w-8 cursor-pointer\">\n    <svg-icon\n      matTooltip=\"Đánh dấu tác vụ quan trọng\"\n      name=\"star\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"sun\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Add to My Day</label>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"bell\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Remind me</label>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"calendar\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Add due date</label>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"clock\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Repeat</label>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"tag\"\n      [size]=\"16\">\n    </svg-icon>\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Pick a category</label>\n  </div>\n</div>\n\n<div class=\"flex flex-row border-b border-gray-100 py-2 cursor-pointer hover:bg-gray-50 hover:border-gray-50\">\n  <div class=\"flex flex-none items-center justify-center w-8\">\n    <svg-icon\n      name=\"paper-clip\"\n      [size]=\"16\">\n    </svg-icon>\n\n\n  </div>\n  <div class=\"flex flex-col flex-grow px-3 py-2\">\n    <label class=\"text-sm cursor-pointer\">Add file</label>\n  </div>\n</div>\n"
        },
        {
            "name": "TasksComponent",
            "id": "component-TasksComponent-117bb70b628ac46759ff3e3099c71326",
            "file": "src/app/todoist/pages/tasks/tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tasks",
            "styleUrls": [
                "tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tasks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapseTaskDone",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "openDrawer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ISortBy>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sorts",
                    "defaultValue": "TASK_SORT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISort[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITask[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "defaultValue": "\"My day\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "today",
                    "defaultValue": "Date.now()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksByProjectId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddTask",
                    "args": [
                        {
                            "name": "taskName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickCollapseTaskDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "ISort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "ISort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickSuggestions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Router, ActivatedRoute, NavigationEnd} from \"@angular/router\";\nimport { Observable } from 'rxjs';\nimport {Store} from '@ngrx/store';\n\nimport {ISort, ITask, ISortBy} from \"@app/interface/task.type\";\nimport {TaskService} from \"@app/services/task.service\";\nimport {TASK_SORT} from \"@todoist/config/const\";\n\nimport {getProjectsAction, changeSortBy, createTaskAction, getTasksAction, changeMenuAction} from \"@todoist/todoist.actions\";\nimport {TodoState} from '@app/todoist/todoist.reducer'\nimport {getProjects, getTasks, getSortBy} from '@app/todoist/todoist.selectors'\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['tasks.component.scss']\n})\nexport class TasksComponent implements OnInit {\n  showLoading: boolean = true;\n  title: string = \"My day\";\n  today: number = Date.now();\n  tasks: ITask[] = [];\n  sorts: ISort[] = TASK_SORT;\n  sortBy: Observable<ISortBy>;\n  openDrawer: boolean = false;\n  collapseTaskDone: boolean = true;\n\n  constructor(\n    private taskService: TaskService,\n    private store: Store<TodoState>,\n    private router: Router,\n    private route: ActivatedRoute) {\n    let id = this.route.snapshot.paramMap.get('taskId');\n\n    if (id) {\n      this.getTasksByProjectId(id);\n    }\n\n    // Check route change\n    router.events.subscribe((val) => {\n      if (val instanceof NavigationEnd) {\n        const id = this.route.snapshot.paramMap.get('taskId');\n\n        if (id) {\n          this.getTasksByProjectId(id);\n        }\n      }\n    })\n\n    this.sortBy = store.select(getSortBy)\n\n    // Tasks from store\n    store.select(getTasks).subscribe((tasks) => {\n      this.tasks = [].concat(tasks);\n\n      // @todo\n      this.showLoading = false;\n    })\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(getProjectsAction());\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.tasks, event.previousIndex, event.currentIndex);\n  }\n\n  getTasksByProjectId(id: string) {\n    if (id) {\n      // Update menu active\n      this.store.dispatch(changeMenuAction({\n        id: id\n      }))\n\n      this.store.select(getProjects).subscribe((projects) => {\n        const project = projects.find((project) => project.name === id || project.id === id);\n\n        if (project) {\n          const {id: projectId, title} = project;\n          this.title = title\n\n          this.store.dispatch(getTasksAction({projectId: projectId}));\n        }\n      })\n    }\n  }\n\n  onClickSort(sort: ISort) {\n    this.store.dispatch(changeSortBy(sort))\n  }\n\n  onClickSuggestions() {\n    this.openDrawer = !this.openDrawer;\n  }\n\n  onAddTask(taskName) {\n    if (taskName) {\n      this.store.dispatch(createTaskAction({\n        task: {\n          title: taskName,\n          status: 'TODO'\n        }\n      }));\n    }\n  }\n\n  onClickCollapseTaskDone() {\n    this.collapseTaskDone = !this.collapseTaskDone;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n",
                    "styleUrl": "tasks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<TodoState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex w-full h-full\">\n  <div class=\"flex flex-col flex-grow p-7 bg-white\">\n    <todoist-skeleton *ngIf=\"showLoading\"></todoist-skeleton>\n\n    <div *ngIf=\"!showLoading\">\n      <div class=\"flex flex-row flex-none w-full justify-between\">\n        <div class=\"\">\n          <h1 class=\"\">{{title}}</h1>\n          <span class=\"text-xs\">{{today | date}}</span>\n        </div>\n        <div class=\"flex flex-row text-sm\">\n          <div class=\"flex flex-row items-center cursor-pointer p-2 h-9 rounded hover:bg-gray-100\" [matMenuTriggerFor]=\"menu\">\n            <svg-icon\n              name=\"switch-vertical\"\n              [size]=\"16\">\n            </svg-icon>\n            <label class=\"pl-2 cursor-pointer\">Sort</label>\n            <mat-menu #menu=\"matMenu\">\n              <button mat-menu-item *ngFor=\"let sort of sorts\" (click)=\"onClickSort(sort)\">\n                <div class=\"flex flex-row items-center\">\n                  <svg-icon\n                    *ngIf=\"sort.icon\"\n                    [name]=\"sort.icon\"\n                    [size]=\"16\">\n                  </svg-icon>\n                  <span class=\"pl-2\">{{sort.title}}</span>\n                </div>\n              </button>\n            </mat-menu>\n          </div>\n\n          <div (click)=\"onClickSuggestions()\"\n               class=\"flex flex-row items-center cursor-pointer p-2 h-9 rounded hover:bg-gray-100\">\n            <svg-icon\n              name=\"light-bulb\"\n              [size]=\"16\">\n            </svg-icon>\n            <label class=\"pl-2 cursor-pointer\">Suggestions</label>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"flex w-full justify-end\" *ngIf=\"(sortBy | async)?.name\">\n        <div class=\"flex flex-row\">\n        <span class=\"flex items-center pr-1 cursor-pointer\">\n           <svg-icon\n             name=\"chevron-down\"\n             [size]=\"16\">\n           </svg-icon>\n        </span>\n          <span class=\"text-xs font-medium\">Đã sắp xếp theo thứ tự bảng chữ cái</span>\n          <span class=\"flex items-center pl-1 cursor-pointer\">\n           <svg-icon\n             name=\"close\"\n             [size]=\"12\">\n           </svg-icon>\n        </span>\n        </div>\n      </div>\n\n      <div class=\"flex flex-grow flex-col mt-5\">\n        <add-task (onAddTask)=\"onAddTask($event)\"></add-task>\n\n        <div class=\"overflow-y-auto\">\n          <ul class=\"w-full\" *ngIf=\"tasks.length\">\n            <div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\n              <app-task\n                *ngFor=\"let task of tasks\"\n                [title]=\"task.title\"\n                [status]=\"task.status\"\n                cdkDrag\n              ></app-task>\n            </div>\n          </ul>\n\n          <div (click)=\"onClickCollapseTaskDone()\" [ngClass]=\"{'border-b': collapseTaskDone}\" class=\"w-full flex flex-row hover:bg-gray-50 cursor-text cursor-pointer cursor-pointer border-t border-gray-100\">\n            <div class=\"flex flex-none items-center justify-center w-8\">\n              <svg-icon\n                matTooltip=\"Thu gọn nhóm nhiệm vụ\"\n                [ngClass]=\"{'-rotate-90': collapseTaskDone}\"\n                class=\"transform cursor-pointer hover:bg-gray-100 rounded-sm p-1\"\n                name=\"chevron-down\"\n                [size]=\"16\">\n              </svg-icon>\n            </div>\n            <div class=\"flex flex-row flex-grow px-3 py-4 cursor-pointer\">\n              <label class=\"text-sm cursor-pointer font-semibold\">Đã hoàn thành</label>\n              <span class=\"flex pl-2 text-sm\">12</span>\n            </div>\n          </div>\n\n          <ul class=\"w-full\" *ngIf=\"!collapseTaskDone\">\n            <app-task *ngFor=\"let task of tasks\" [title]=\"task.title\"></app-task>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"flex none bg-gray-50 w-80 p-3\">\n    <div class=\"w-full border border-gray-100 rounded p-3 bg-white\">\n      <task-detail></task-detail>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TodoistComponent",
            "id": "component-TodoistComponent-0321ab4ac31aeb429d164ad8e7c64193",
            "file": "src/app/todoist/todoist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todoist",
            "styleUrls": [],
            "styles": [
                ":host { width: 100% }"
            ],
            "templateUrl": [
                "./todoist.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "openDrawer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "onClickSuggestions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-todoist',\n  templateUrl: './todoist.component.html',\n  styles: [':host { width: 100% }']\n})\nexport class TodoistComponent {\n  openDrawer: boolean = false;\n\n  onClickSuggestions() {\n    this.openDrawer = !this.openDrawer;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { width: 100% }\n",
            "templateData": "<div class=\"flex w-full h-full\">\n  <div class=\"flex none bg-gray-50 w-72 relative\">\n    <left-menu></left-menu>\n  </div>\n  <mat-drawer-container hasBackdrop=\"false\" class=\"flex flex-grow\">\n    <mat-drawer-content>\n      <router-outlet></router-outlet>\n    </mat-drawer-content>\n    <mat-drawer mode=\"over\" position=\"end\" class=\"w-80\" [opened]=\"openDrawer\">\n      <div class=\"relative p-5\">\n        <span (click)=\"onClickSuggestions()\" class=\"absolute top-5 right-5 cursor-pointer hover:opacity-80\">\n          <svg-icon\n            name=\"close\"\n            [size]=\"16\">\n          </svg-icon>\n        </span>\n        <suggestion></suggestion>\n      </div>\n    </mat-drawer>\n  </mat-drawer-container>\n</div>\n<svg-definitions></svg-definitions>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-f61677565be000c1782bcc3af77f037f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {StoreDevtoolsModule} from \"@ngrx/store-devtools\";\nimport {StoreModule} from \"@ngrx/store\";\nimport { AppRoutingModule } from './app-routing.module';\nimport { GraphQLModule } from './graphql.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    GraphQLModule,\n    StoreModule.forRoot({}, {}),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      logOnly: false, // Restrict extension to log-only mode\n      autoPause: true, // Pauses recording actions and state changes when the extension window is not open\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "GraphQLModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-06d134546a4c3cb79b2be8ad090f39c4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'tasks',\n    loadChildren: () => \"import('./todoist/todoist.module').then((m) => m.TodoistModule)\"\n  },\n  {\n    path: '',\n    redirectTo: 'tasks/myday',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GraphQLModule",
            "id": "module-GraphQLModule-164edd3a3c4767c299caacad9fb823b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/graphql.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {ApolloClientOptions, InMemoryCache} from '@apollo/client/core';\nimport {HttpLink} from 'apollo-angular/http';\nimport {environment} from \"../environments/environment\";\n\nconst uri = `${environment.apiUrl}graphql`;\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoistModule",
            "id": "module-TodoistModule-cdb8485c318fa3e2ffae3ebfcbc2aed8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todoist/todoist.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {StoreModule} from \"@ngrx/store\";\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { TodoistRoutingModule } from './todoist-routing.module';\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {MatRadioModule} from \"@angular/material/radio\";\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatButtonModule} from \"@angular/material/button\";\n\nimport { TodoistComponent } from \"@todoist/todoist.component\";\nimport { TasksComponent } from './pages/tasks/tasks.component';\nimport { SearchComponent } from \"@todoist/pages/search/search.component\";\nimport { TaskComponent } from './components/task/task.component'\nimport { AddTaskComponent } from './components/add-task/add-task.component';\nimport { LeftMenuComponent } from './components/left-menu/left-menu.component';\nimport { ResizerComponent } from \"./components/resizer/resizer.component\";\nimport { SvgDefinitionsComponent } from './components/svg-definitions/svg-definitions.component';\nimport { SvgIconComponent } from './components/svg-icon/svg-icon.component'\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\nimport { SuggestionComponent } from './components/suggestion/suggestion.component';\nimport { TaskDetailComponent } from './components/task-detail/task-detail.component';\nimport { SkeletonComponent } from \"./components/skeleton/skeleton.component\";\n\nimport {TODO_FEATURE_KEY, totoReducer} from \"./todoist.reducer\";\nimport {TodoistEffects} from \"@todoist/todoist.effects\";\n\n@NgModule({\n  declarations: [\n    TodoistComponent,\n    TasksComponent,\n    SearchComponent,\n    TaskComponent,\n    LeftMenuComponent,\n    ResizerComponent,\n    SvgDefinitionsComponent,\n    SvgIconComponent,\n    AddTaskComponent,\n    NotFoundComponent,\n    SuggestionComponent,\n    TaskDetailComponent,\n    SkeletonComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    DragDropModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatTooltipModule,\n    MatSidenavModule,\n    MatButtonModule,\n    TodoistRoutingModule,\n    StoreModule.forFeature(TODO_FEATURE_KEY, totoReducer),\n    EffectsModule.forRoot([TodoistEffects])\n  ]\n})\nexport class TodoistModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddTaskComponent"
                        },
                        {
                            "name": "LeftMenuComponent"
                        },
                        {
                            "name": "NotFoundComponent"
                        },
                        {
                            "name": "ResizerComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SkeletonComponent"
                        },
                        {
                            "name": "SuggestionComponent"
                        },
                        {
                            "name": "SvgDefinitionsComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskDetailComponent"
                        },
                        {
                            "name": "TasksComponent"
                        },
                        {
                            "name": "TodoistComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TodoistRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoistRoutingModule",
            "id": "module-TodoistRoutingModule-c2405213de2153a535c271c1bebf7a85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todoist/todoist-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n// Components\nimport {TodoistComponent} from \"@todoist/todoist.component\";\nimport {TasksComponent} from \"@todoist/pages/tasks/tasks.component\";\nimport {SearchComponent} from \"@todoist/pages/search/search.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TodoistComponent,\n    children: [\n      {\n        path: 'search',\n        component: SearchComponent\n      },\n      {\n        path: 'search/:keyword',\n        component: SearchComponent\n      },\n      {\n        path: ':taskId',\n        component: TasksComponent\n      }\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TodoistRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "changeMenuAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Change Menu', props<{id: string}>())"
            },
            {
                "name": "changeSortBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Change Sort By', props<ISort>())"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CREATE_TASK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  mutation createTask($title: String!, $description: String) {\n    createTask(input: {\n      data: {\n        title: $title,\n        description: $description\n      }\n    }) {\n      task {\n        title\n      }\n    }\n  }\n`"
            },
            {
                "name": "createTaskAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Create Task', props<{task: ITask}>())"
            },
            {
                "name": "DEFAULT_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/config/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IMenu[]",
                "defaultValue": "[\n  {name: 'myday', label: 'My Day', active: true, icon: 'sun', counter: 0},\n  {name: 'important', label: 'Important', active: false, icon: 'star', counter: 0},\n  {name: 'planned', label: 'Planned', active: false, icon: 'calendar', counter: 0},\n  {name: 'task', label: 'Task', active: false, icon: 'home', counter: 0},\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'https://todoist.tuando.net/'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:1338/'\n}"
            },
            {
                "name": "getMenus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(todoSelector, state => {\n  return state.menus\n})"
            },
            {
                "name": "getProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(todoSelector, state => {\n  return state.projects\n})"
            },
            {
                "name": "getProjectsAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Get Projects')"
            },
            {
                "name": "getSortBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(todoSelector, state => {\n  return state.sortBy\n})"
            },
            {
                "name": "getTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(todoSelector, state => {\n  return state.tasks\n})"
            },
            {
                "name": "getTasksAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Get Tasks', props<{projectId: string}>())"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodoState",
                "defaultValue": "{\n  menus: DEFAULT_MENU,\n  projects: [],\n  tasks: []\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "QUERY_PROJECTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  query query {\n    projects {\n      id\n      name\n      title\n      description\n      icon\n      predefined\n    }\n  }\n`"
            },
            {
                "name": "QUERY_TASKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n  query query($projectId: String) {\n    tasks(where: {project_in: $projectId}) {\n      title\n      description\n      important\n      status\n      project {\n        id\n        title\n      }\n    }\n  }\n`"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TASK_SORT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/config/const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISort[]",
                "defaultValue": "[\n  {\n    name: 'important',\n    title: 'Tầm quan trọng',\n    icon: 'star'\n  },\n  {\n    name: 'expiredDate',\n    title: 'Ngày đến hạn',\n    icon: 'calendar'\n  },\n  {\n    name: 'alphabet',\n    title: 'Theo thứ tự bảng chữ cái',\n    icon: 'switch-vertical'\n  },\n  {\n    name: 'createdDate',\n    title: 'Ngày tạo',\n    icon: 'calculator'\n  }\n]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "TODO_FEATURE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'todo'"
            },
            {
                "name": "todoSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TodoState>(TODO_FEATURE_KEY)"
            },
            {
                "name": "totoReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n    on(updateProjectsAction, (state, {projects}) => {\n      return produce(state, draftState => {\n        // Update menu\n        draftState.menus = projects.map((project) => {\n          return {\n            name: project.name || project.id,\n            label: project.title,\n            active: false,\n            icon: project.icon,\n          }\n        })\n\n        draftState.projects = projects\n      })\n    }),\n    on(changeMenuAction, (state, {id}) => {\n      return produce(state, draftState => {\n        draftState.menus.map((menu) => {\n          menu.active = (menu.name === id)\n\n          return menu;\n        })\n      })\n    }),\n    on(updateTasksAction, (state, {tasks}) => {\n      return produce(state, draftState => {\n        draftState.tasks = tasks\n      })\n    }),\n    on(changeSortBy, (state, sort) => {\n      return {...state, sortBy: {name: sort.name, az: 'asc'}}\n    }),\n    on(createTaskAction, (state, {task}) => {\n\n      console.log('tasl', task)\n\n      return {...state, tasks: state.tasks}\n    }),\n)"
            },
            {
                "name": "updateProjectsAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Update Projects', props<{projects: IProject[]}>())"
            },
            {
                "name": "updateTaskAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Update Task', props<ITask>())"
            },
            {
                "name": "updateTasksAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todoist/todoist.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todoist] Update Tasks', props<{tasks: ITask[]}>())"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiUrl}graphql`"
            }
        ],
        "functions": [
            {
                "name": "createApollo",
                "file": "src/app/graphql.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApolloClientOptions<any>",
                "jsdoctags": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/todoist/todoist.actions.ts": [
                {
                    "name": "changeMenuAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Change Menu', props<{id: string}>())"
                },
                {
                    "name": "changeSortBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Change Sort By', props<ISort>())"
                },
                {
                    "name": "createTaskAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Create Task', props<{task: ITask}>())"
                },
                {
                    "name": "getProjectsAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Get Projects')"
                },
                {
                    "name": "getTasksAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Get Tasks', props<{projectId: string}>())"
                },
                {
                    "name": "updateProjectsAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Update Projects', props<{projects: IProject[]}>())"
                },
                {
                    "name": "updateTaskAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Update Task', props<ITask>())"
                },
                {
                    "name": "updateTasksAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todoist] Update Tasks', props<{tasks: ITask[]}>())"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/graphql.ts": [
                {
                    "name": "CREATE_TASK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  mutation createTask($title: String!, $description: String) {\n    createTask(input: {\n      data: {\n        title: $title,\n        description: $description\n      }\n    }) {\n      task {\n        title\n      }\n    }\n  }\n`"
                },
                {
                    "name": "QUERY_PROJECTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  query query {\n    projects {\n      id\n      name\n      title\n      description\n      icon\n      predefined\n    }\n  }\n`"
                },
                {
                    "name": "QUERY_TASKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n  query query($projectId: String) {\n    tasks(where: {project_in: $projectId}) {\n      title\n      description\n      important\n      status\n      project {\n        id\n        title\n      }\n    }\n  }\n`"
                }
            ],
            "src/app/todoist/config/const.ts": [
                {
                    "name": "DEFAULT_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/config/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "defaultValue": "[\n  {name: 'myday', label: 'My Day', active: true, icon: 'sun', counter: 0},\n  {name: 'important', label: 'Important', active: false, icon: 'star', counter: 0},\n  {name: 'planned', label: 'Planned', active: false, icon: 'calendar', counter: 0},\n  {name: 'task', label: 'Task', active: false, icon: 'home', counter: 0},\n]"
                },
                {
                    "name": "TASK_SORT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/config/const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISort[]",
                    "defaultValue": "[\n  {\n    name: 'important',\n    title: 'Tầm quan trọng',\n    icon: 'star'\n  },\n  {\n    name: 'expiredDate',\n    title: 'Ngày đến hạn',\n    icon: 'calendar'\n  },\n  {\n    name: 'alphabet',\n    title: 'Theo thứ tự bảng chữ cái',\n    icon: 'switch-vertical'\n  },\n  {\n    name: 'createdDate',\n    title: 'Ngày tạo',\n    icon: 'calculator'\n  }\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'https://todoist.tuando.net/'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:1338/'\n}"
                }
            ],
            "src/app/todoist/todoist.selectors.ts": [
                {
                    "name": "getMenus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(todoSelector, state => {\n  return state.menus\n})"
                },
                {
                    "name": "getProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(todoSelector, state => {\n  return state.projects\n})"
                },
                {
                    "name": "getSortBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(todoSelector, state => {\n  return state.sortBy\n})"
                },
                {
                    "name": "getTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(todoSelector, state => {\n  return state.tasks\n})"
                },
                {
                    "name": "todoSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TodoState>(TODO_FEATURE_KEY)"
                }
            ],
            "src/app/todoist/todoist.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "defaultValue": "{\n  menus: DEFAULT_MENU,\n  projects: [],\n  tasks: []\n}"
                },
                {
                    "name": "TODO_FEATURE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'todo'"
                },
                {
                    "name": "totoReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todoist/todoist.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n    on(updateProjectsAction, (state, {projects}) => {\n      return produce(state, draftState => {\n        // Update menu\n        draftState.menus = projects.map((project) => {\n          return {\n            name: project.name || project.id,\n            label: project.title,\n            active: false,\n            icon: project.icon,\n          }\n        })\n\n        draftState.projects = projects\n      })\n    }),\n    on(changeMenuAction, (state, {id}) => {\n      return produce(state, draftState => {\n        draftState.menus.map((menu) => {\n          menu.active = (menu.name === id)\n\n          return menu;\n        })\n      })\n    }),\n    on(updateTasksAction, (state, {tasks}) => {\n      return produce(state, draftState => {\n        draftState.tasks = tasks\n      })\n    }),\n    on(changeSortBy, (state, sort) => {\n      return {...state, sortBy: {name: sort.name, az: 'asc'}}\n    }),\n    on(createTaskAction, (state, {task}) => {\n\n      console.log('tasl', task)\n\n      return {...state, tasks: state.tasks}\n    }),\n)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/graphql.module.ts": [
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiUrl}graphql`"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/graphql.module.ts": [
                {
                    "name": "createApollo",
                    "file": "src/app/graphql.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApolloClientOptions<any>",
                    "jsdoctags": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "tasks",
                        "loadChildren": "./todoist/todoist.module#TodoistModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/todoist/todoist-routing.module.ts",
                                        "module": "TodoistRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TodoistComponent",
                                                "children": [
                                                    {
                                                        "path": "search",
                                                        "component": "SearchComponent"
                                                    },
                                                    {
                                                        "path": "search/:keyword",
                                                        "component": "SearchComponent"
                                                    },
                                                    {
                                                        "path": ":taskId",
                                                        "component": "TasksComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TodoistModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "tasks/myday",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_TASK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUERY_PROJECTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUERY_TASKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/menu.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenu",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/project.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProject",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/task.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateTaskInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/task.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISort",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/task.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISortBy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/task.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITask",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/add-task/add-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/left-menu/left-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/resizer/resizer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResizerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/suggestion/suggestion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuggestionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/svg-definitions/svg-definitions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgDefinitionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/task-detail/task-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/config/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_MENU",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/config/const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TASK_SORT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/pages/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/pages/tasks/tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Action",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeMenuAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeSortBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProjectsAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTasksAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProjectsAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTasksAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoistComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoistEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TODO_FEATURE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "totoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMenus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSortBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todoist/todoist.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}